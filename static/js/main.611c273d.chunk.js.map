{"version":3,"sources":["components/CharacterCard/index.js","components/MainContainer/index.js","components/TopNavbar/index.js","components/Footer/index.js","App.js","index.js"],"names":["CharacterCard","props","className","onClick","handleClick","id","alt","name","src","image","MainContainer","children","TopNavbar","role","currentScore","topScore","message","Footer","href","title","App","state","clickedAlready","characters","score","correctGuess","setState","resetGame","shuffleArray","array","i","length","j","Math","floor","random","includes","updatedClickArray","push","this","map","character","Component","ReactDOM","render","document","getElementById"],"mappings":"+0DAaeA,MAVf,SAAwBC,GACtB,OACE,qBAAKC,UAAU,eAAf,SACE,qBAAKC,QAAS,kBAAMF,EAAMG,YAAYH,EAAMI,KAAKH,UAAU,0BAA3D,SACE,qBAAKI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,a,MCM1BC,MAVf,SAAwBT,GACtB,OACE,qBAAKC,UAAU,gBAAf,SACE,qBAAKA,UAAU,qBAAf,SACGD,EAAMU,c,MCWAC,MAff,SAAoBX,GAClB,OACE,qBAAKC,UAAU,YAAf,SACE,sBAAKA,UAAU,yDAAf,UACE,uBAAMA,UAAU,8BAAhB,mBAAoD,sBAAMA,UAAU,qBAAhB,qBAApD,UACA,sBAAKA,UAAU,yBAAyBW,KAAK,QAA7C,UACE,uBAAMX,UAAU,kCAAhB,oBAA0DD,EAAMa,gBAChE,uBAAMZ,UAAU,qCAAhB,wBAAiED,EAAMc,eAEzE,sBAAMb,UAAU,+DAAhB,SAAgFD,EAAMe,gB,OCD/EC,MATf,SAAiBhB,GACf,OACE,sBAAKC,UAAU,qEAAf,UACE,mBAAGA,UAAU,gCAAgCgB,KAAK,kDAAkDC,MAAM,wCAA1G,oCACA,mBAAGjB,UAAU,4DAA4DgB,KAAK,gCAAgCC,MAAM,uBAApH,yCCyFSC,E,4MAtFbC,MAAQ,CACNC,eAAgB,GAChBC,WAAYA,EACZC,MAAO,EACPT,SAAU,EACVC,QAAS,qE,EAGXS,aAAe,WACT,EAAKJ,MAAMG,MAAQ,EAAKH,MAAMN,SAChC,EAAKW,SAAS,CACZV,QAAQ,iBACRQ,MAAO,EAAKH,MAAMG,MAAQ,EAC1BT,SAAU,EAAKM,MAAMG,QAIvB,EAAKE,SAAS,CACZV,QAAQ,iBACRQ,MAAO,EAAKH,MAAMG,MAAQ,K,EAKhCG,UAAY,WAEP,EAAKN,MAAMG,OAAS,EAAKH,MAAMN,SAChC,EAAKW,SAAS,CACZV,QAAS,mBACTD,SAAU,EAAKM,MAAMG,MACrBA,MAAO,EACPF,eAAe,KAIjB,EAAKI,SAAS,CACZV,QAAS,mBACTQ,MAAO,EACPF,eAAe,M,EAOrBM,aAAe,SAAAC,GACb,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADD,EAElB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAMG,GAFwB,KAI3C,OAAOH,G,EAGTzB,YAAc,SAAAC,GAGZ,GAAI,EAAKgB,MAAMC,eAAec,SAAS/B,GACrC,EAAKsB,gBAEF,CACH,IAAIU,EAAoB,EAAKhB,MAAMC,eACnCe,EAAkBC,KAAKjC,GACvB,EAAKqB,SAAS,CAACJ,eAAgBe,IAAqB,kBAAM,EAAKZ,oB,uDAIzD,IAAD,OACP,OACE,gCACE,cAAC,EAAD,CAAWT,QAASuB,KAAKlB,MAAML,QAASF,aAAcyB,KAAKlB,MAAMG,MAAOT,SAAUwB,KAAKlB,MAAMN,WAC7F,cAAC,EAAD,UACGwB,KAAKX,aAAaW,KAAKlB,MAAME,YAAYiB,KAAI,SAAAC,GAAS,OACrD,cAAC,EAAD,CACErC,YAAa,EAAKA,YAClBC,GAAIoC,EAAUpC,GAEdI,MAAOgC,EAAUhC,OADZgC,EAAUpC,SAKrB,cAAC,EAAD,W,GAlFUqC,a,MCFlBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.611c273d.chunk.js","sourcesContent":["import React from 'react'\r\nimport './style.css'\r\n\r\nfunction CharacterCard (props) {\r\n  return (\r\n    <div className='card mx-auto'>\r\n      <div onClick={() => props.handleClick(props.id)} className='clickable img-container'>\r\n        <img alt={props.name} src={props.image} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CharacterCard\r\n","import React from 'react'\r\nimport './style.css'\r\n\r\nfunction MainContainer (props) {\r\n  return (\r\n    <div className='container p-0'>\r\n      <div className='row no-gutters p-0'>\r\n        {props.children}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MainContainer\r\n","import React from 'react'\r\nimport './style.css'\r\n\r\nfunction TopNavbar (props) {\r\n  return (\r\n    <div className='container'>\r\n      <nav className='navbar alignment fixed-top black-bg text-white m-0 p-1'>\r\n        <span className='text-left appname display-4'>React <span className='d-none d-md-inline'>Memory </span>Game</span>\r\n        <div className='btn-group btn-group-lg' role='group'>\r\n          <span className='btn btn-lg btn-info navbar-text'>Score: {props.currentScore}</span>\r\n          <span className='btn btn-lg btn-success navbar-text'>Top Score: {props.topScore}</span>\r\n        </div>\r\n        <span className='btn btn-outline-light btn-block disabled text-center message'>{props.message}</span>\r\n      </nav>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TopNavbar\r\n","import React from 'react'\r\n\r\nfunction Footer (props) {\r\n  return (\r\n    <nav className='navbar justify-content-center fixed-bottom navbar-dark bg-dark p-0'>\r\n      <a className='badge badge-lg badge-info p-2' href='https://github.com/Vincent440/react-memory-game' title='Link to application github repository'>Application Repository</a>\r\n      <a className='navbar-brand p-2 badge-lg badge badge-success text-center' href='https://vincent440.github.io/' title='Link to my Portfolio'>Vincent Shury Portfolio</a>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import React, { Component } from \"react\";\r\nimport CharacterCard from \"./components/CharacterCard\";\r\nimport MainContainer from \"./components/MainContainer\";\r\nimport TopNavbar from \"./components/TopNavbar\";\r\nimport characters from \"./characters.json\";\r\nimport Footer from \"./components/Footer\";\r\n\r\nclass App extends Component {\r\n  // Setting this.state.characters to the characters json array\r\n  state = {\r\n    clickedAlready: [] ,\r\n    characters: characters,\r\n    score: 0,\r\n    topScore: 0,\r\n    message: \"Click any image to Start, Do not select more then once each game!\"\r\n  };\r\n  // correctGuess increases the score by 1, Displays message, and if needed updates top score.\r\n  correctGuess = () => {\r\n    if (this.state.score > this.state.topScore) {\r\n      this.setState({\r\n        message:\"Correct Guess!\",\r\n        score: this.state.score + 1,\r\n        topScore: this.state.score\r\n      });\r\n    }\r\n    else {\r\n      this.setState({\r\n        message:\"Correct Guess!\",\r\n        score: this.state.score + 1\r\n      });\r\n    }\r\n  };\r\n  // resetGame sets this.state.score to 0 and Displays message\r\n  resetGame = () => {\r\n    // Game reset display message and start new game.\r\n    if(this.state.score >= this.state.topScore){\r\n      this.setState({\r\n        message: \"Incorrect Guess!\",\r\n        topScore: this.state.score,\r\n        score: 0,\r\n        clickedAlready:[]\r\n      });\r\n    }\r\n    else {\r\n      this.setState({ \r\n        message: \"Incorrect Guess!\",\r\n        score: 0,\r\n        clickedAlready:[]\r\n      });\r\n    }\r\n\r\n  };\r\n\r\n  // Randomize the array so that it never appears the same. \r\n  shuffleArray = array => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n  };\r\n\r\n  handleClick = id => {\r\n    // ClickedCharacters filters the characters array from state to grab only that character's object that has been clicked\r\n\r\n    if (this.state.clickedAlready.includes(id)) {\r\n      this.resetGame();\r\n    }\r\n    else {\r\n      let updatedClickArray = this.state.clickedAlready\r\n      updatedClickArray.push(id);\r\n      this.setState({clickedAlready: updatedClickArray }, () => this.correctGuess());\r\n    }\r\n  }\r\n  // Map over this.state.characters and render a CharacterCard component for each character object\r\n  render() {\r\n    return (\r\n      <div>\r\n        <TopNavbar message={this.state.message} currentScore={this.state.score} topScore={this.state.topScore} />\r\n        <MainContainer>\r\n          {this.shuffleArray(this.state.characters).map(character => (\r\n            <CharacterCard\r\n              handleClick={this.handleClick}\r\n              id={character.id}\r\n              key={character.id}\r\n              image={character.image}\r\n            />\r\n          ))}\r\n        </MainContainer>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}